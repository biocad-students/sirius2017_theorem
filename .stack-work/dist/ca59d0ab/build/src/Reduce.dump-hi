
==================== FINAL INTERFACE ====================
2017-07-08 09:29:20.0903105 UTC

interface proj-0.1.0.0-B4EokiQJmtYJtEnGQjIIKx:Reduce 8002
  interface hash: df418347aedbc674c04cd9eee242519e
  ABI hash: e7c31f5f2d3dd772820c5ae540f6177d
  export-list hash: d5d0829edc88c2b5e78b4ac4caa385d4
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 9b927a2d36abe52536408c440c6086b5
  sig of: Nothing
  used TH splices: False
  where
exports:
  Reduce.addNum
  Reduce.reduce
  Reduce.reduce'
  Reduce.reduce''
  Reduce.rename'
  Reduce.renameAll
  Reduce.subs
  Reduce.termToTerms
module dependencies: Type
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.Foldable 254e836c2d813d34e47feb29bb8d40ed
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:GHC.List d11eb227c1c6fbfd89bb781d72eaea0d
import  -/  base-4.9.1.0:GHC.Num 38b8aac8807c096c7f3ca3c1eff02939
import  -/  base-4.9.1.0:GHC.Show eca5834daba3b6a2bbbe64ab52056707
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
import  -/  Type b7ba7c7ea34e0ed52eb5154b9b3554ce
  exports: b472081dbee7110444820ea50fdb7c82
  App 028610684679a2a1b78f577cb5f804c3
  Lam d02ebc69c1427afc56b0adc83fef121e
  Term 6248cbcca85ecfa46b50bacefd50c8ab
  V fcc0baae0b12a55a56d67d4b07cac759
  Var de0c36501ff52403878aea2ae5a0b25f
  Var 9dc339e1c83370f86f802fbed15eacce
251f6a7b02fc0f8ce8937b2e6621d9a4
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Reduce.$trModule2
                   Reduce.$trModule1) -}
48de5f2ab2d6d6c8d3065c16172707aa
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Reduce"#) -}
40563f7ddf6b25c0f34316c52bd1e79e
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "proj-0.1.0.0-B4EokiQJmtYJtEnGQjIIKx"#) -}
78f4f3c6eb948ccbe8150189021fd20c
  addNum :: Type.Var -> GHC.Types.Int -> Type.Var
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                Reduce.addNum1
                  `cast`
                (<Type.Var>_R ->_R <GHC.Types.Int>_R ->_R Sym (Type.N:Var[0])) -}
2655baf11441c50ef1bbe069f46bb181
  addNum1 :: Type.Var -> GHC.Types.Int -> [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U)>,
     Unfolding: (\ (ds :: Type.Var) (i :: GHC.Types.Int) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   ds `cast` (Type.N:Var[0])
                   (case i of ww2 { GHC.Types.I# ww3 ->
                    case GHC.Show.$wshowSignedInt
                           0#
                           ww3
                           (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                    GHC.Types.: @ GHC.Types.Char ww5 ww6 } })) -}
006dfa49c51e7223bf67009311fa078f
  reduce :: Type.Term -> Type.Term
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Type.Term) ->
                 Reduce.reduce''
                   (Reduce.rename'
                      (GHC.Types.[] @ (Type.Var, GHC.Types.Int))
                      Reduce.reduce1
                      x)) -}
18ae2228fd99593d5783f1153e121e7d
  reduce' :: Type.Term -> Type.Term
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
ca564f689680cc31fcc1dcba757599fd
  reduce'' :: Type.Term -> Type.Term
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U> -}
0534507fb1127cc0452aab5ffedba9de
  reduce1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
5d718aa848dd62d15cc6d986b46bba26
  rename' ::
    [(Type.Var, GHC.Types.Int)]
    -> GHC.Types.Int -> Type.Term -> Type.Term
  {- Arity: 3, Strictness: <L,U><L,U(U)><S,1*U> -}
d3dfd17b0cf6a9ef8b530188ecb64f55
  renameAll :: Type.Term -> Type.Term
  {- Arity: 1,
     Unfolding: (Reduce.rename'
                   (GHC.Types.[] @ (Type.Var, GHC.Types.Int))
                   Reduce.reduce1) -}
12c0e0d6a48bce978879e3deef1d44af
  subs :: Type.Term -> Type.Var -> Type.Term -> Type.Term
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,U><L,U> -}
d38684366bdc5dd4c2e74cbe70feb6c6
  termToTerms :: Type.Term -> [Type.Term]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

