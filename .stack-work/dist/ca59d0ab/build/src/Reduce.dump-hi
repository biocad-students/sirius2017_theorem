
==================== FINAL INTERFACE ====================
2017-07-09 11:06:32.6057042 UTC

interface proj-0.1.0.0-B4EokiQJmtYJtEnGQjIIKx:Reduce 8002
  interface hash: b0bcef38a39c906da72d3e33a45e0287
  ABI hash: d55aea280a24a456ae88ce590f36af65
  export-list hash: 06fb0f12d9bdfeda3c7825295bac866f
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 9b927a2d36abe52536408c440c6086b5
  sig of: Nothing
  used TH splices: False
  where
exports:
  Reduce.alpha
  Reduce.beta
  Reduce.binded
  Reduce.eta
  Reduce.free
  Reduce.fresh
  Reduce.reduce
  Reduce.reduce'
  Reduce.subs
module dependencies: Type
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.Foldable 254e836c2d813d34e47feb29bb8d40ed
import  -/  base-4.9.1.0:Data.List 7349774f430841349c90dfd1144aea97
import  -/  base-4.9.1.0:Data.OldList c9282ee91951bdcbd918d2960562c007
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:GHC.List d11eb227c1c6fbfd89bb781d72eaea0d
import  -/  base-4.9.1.0:GHC.Show eca5834daba3b6a2bbbe64ab52056707
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
import  -/  Type 4f415a5c7446bd912e332dc7e124bd82
  exports: 3324492b52d478a440033a99b78b4052
  App 22d4658b9e9fae1f26e7849d0723e036
  Lam 5544a67d3e6e2486699453f0d6faf175
  Term fb713e5fc7f296cf68ac8e595f28c88b
  V 7283ee088aa08977c588e0985d559e11
  Var 8412ffd8eafdb4dc73f9791aba986f5c
  Var f1a1d9600c91402d3c3cb96094cb7c58
  body c80ba14e90d5b6c052f6ea4220bcbc05
  var 3f5d07c985efabb8e7bab4070faa02f2
251f6a7b02fc0f8ce8937b2e6621d9a4
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Reduce.$trModule2
                   Reduce.$trModule1) -}
48de5f2ab2d6d6c8d3065c16172707aa
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Reduce"#) -}
40563f7ddf6b25c0f34316c52bd1e79e
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "proj-0.1.0.0-B4EokiQJmtYJtEnGQjIIKx"#) -}
200ee1a6b5d5fc9a804f5d41fc7a371c
  alpha :: Type.Term -> [Type.Var] -> Type.Term
  {- Arity: 2, Strictness: <S,1*U><L,U> -}
ea03cac059b52e3d73d130d9e2d27582
  beta :: Type.Term -> Type.Term
  {- Arity: 1, Strictness: <S,1*U> -}
7952d79144d14786f988b884e9199985
  binded :: Type.Term -> [Type.Var]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
a23e9c970b2fda7a2322b1bd1341a5b2
  eta :: Type.Term -> Type.Term
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
bd5c395ef68d3aa46c35da6c6e36c52b
  free :: Type.Term -> [Type.Var]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
6c2c26b61f8fe0a915e6a4c71e4f048e
  fresh :: [Type.Var] -> Type.Var
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (arr :: [Type.Var]) ->
                 letrec {
                   go :: [GHC.Integer.Type.Integer] -> Type.Var
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [GHC.Integer.Type.Integer]) ->
                     case ds of wild {
                       [] -> GHC.List.badHead @ Type.Var
                       : y ys
                       -> let {
                            lvl :: GHC.Base.String
                            = case GHC.Show.$w$cshowsPrec1
                                     0#
                                     y
                                     (GHC.Types.[] @ GHC.Types.Char) of ww2 { (#,#) ww3 ww4 ->
                              GHC.Types.: @ GHC.Types.Char ww3 ww4 }
                          } in
                          let {
                            z :: Type.Var = go ys
                          } in
                          letrec {
                            go1 :: [GHC.Types.Char] -> Type.Var
                              {- Arity: 1, Strictness: <S,1*U> -}
                            = \ (ds1 :: [GHC.Types.Char]) ->
                              case ds1 of wild1 {
                                [] -> z
                                : y1 ys1
                                -> let {
                                     x :: [GHC.Types.Char] = GHC.Types.: @ GHC.Types.Char y1 lvl
                                   } in
                                   case GHC.List.elem
                                          @ Type.Var
                                          Type.$fEqVar
                                          x `cast` (Sym (Type.N:Var[0]))
                                          arr of wild2 {
                                     GHC.Types.False -> x `cast` (Sym (Type.N:Var[0]))
                                     GHC.Types.True -> go1 ys1 } }
                          } in
                          go1 Reduce.fresh3 }
                 } in
                 go Reduce.fresh1) -}
37c0180e0b980e310ed0cf499b7e7379
  fresh1 :: [GHC.Integer.Type.Integer]
  {- Unfolding: (case GHC.Enum.$wenumDeltaInteger
                        Reduce.fresh2
                        Reduce.fresh2 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ GHC.Integer.Type.Integer ww1 ww2 }) -}
027148920611b0c0f23f1c0e76868833
  fresh2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
95585d78f94e77c8e1f82273288d03f9
  fresh3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Enum.eftChar 97# 122#) -}
7229cad99cf181c54a12ccdf0b091ad5
  reduce :: Type.Term -> Type.Term
  {- Arity: 1, Strictness: <S,U> -}
3e3d20542ee83adc1efe130fdabf3a18
  reduce' :: Type.Term -> Type.Term
  {- Arity: 1, Strictness: <S,U> -}
36ae0ba70003b633002a2481293e1fda
  subs :: Type.Term -> Type.Var -> Type.Term -> Type.Term
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

