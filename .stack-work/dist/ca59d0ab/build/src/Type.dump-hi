
==================== FINAL INTERFACE ====================
2017-07-10 18:39:34.4922971 UTC

interface proj-0.1.0.0-GViSLdnWNEqHe1z7eCQaTl:Type 8002
  interface hash: 277ba6fb8c84e78c77dc7ea33d541157
  ABI hash: 71eb38e3e23fdbc0ecc7452746656fe7
  export-list hash: 3a101c658448f9cbdcf2300f3098b7fc
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 9b927a2d36abe52536408c440c6086b5
  sig of: Nothing
  used TH splices: False
  where
exports:
  Type.axiom
  Type.noname
  Type.Name
  Type.Term{Type.App Type.Fa Type.Lam Type.Uni Type.Var alg body dat tpe uni var}
  Type.Uni{Type.Box Type.Star}
  Type.Var{Type.V}
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR*
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Show
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:GHC.Num 38b8aac8807c096c7f3ca3c1eff02939
import  -/  base-4.9.1.0:GHC.Read 823163de9fa29f31f251382abc171b2b
import  -/  base-4.9.1.0:GHC.Show eca5834daba3b6a2bbbe64ab52056707
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
import  -/  base-4.9.1.0:Text.ParserCombinators.ReadPrec 5cc8ec62ab8aeda628247695b64f5e42
import  -/  base-4.9.1.0:Text.Read.Lex a861691fe58d2d0a125f55a5ebadf631
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  integer-gmp-1.0.0.1:GHC.Integer.Type 5e60b761569ee353529e98a36b72df11
import  -/  text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text 35f976519564888082d42815342d42ed
import  -/  text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Internal 43a9166170aaf8c9b180c2d3ce2cfa3c
3fa6513992eb8f4d5d199fa60ff97063
  $fEqTerm :: GHC.Classes.Eq Type.Term
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Type.Term Type.$fEqTerm_$c== Type.$fEqTerm_$c/= -}
3fa6513992eb8f4d5d199fa60ff97063
  $fEqTerm_$c/= :: Type.Term -> Type.Term -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Type.Term) (b :: Type.Term) ->
                 case Type.$fEqTerm_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
3fa6513992eb8f4d5d199fa60ff97063
  $fEqTerm_$c== :: Type.Term -> Type.Term -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
758bf26cffd580ff2e525117ac8d2cc9
  $fEqUni :: GHC.Classes.Eq Type.Uni
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:. @ Type.Uni Type.$fEqUni_$c== Type.$fEqUni_$c/= -}
758bf26cffd580ff2e525117ac8d2cc9
  $fEqUni_$c/= :: Type.Uni -> Type.Uni -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Type.Uni) (b :: Type.Uni) ->
                 case a of wild {
                   Type.Star
                   -> case b of wild1 {
                        Type.Star -> GHC.Types.False Type.Box ipv -> GHC.Types.True }
                   Type.Box a1
                   -> case b of wild1 {
                        Type.Star -> GHC.Types.True
                        Type.Box b1
                        -> case GHC.Integer.Type.eqInteger# a1 b1 of wild2 { DEFAULT ->
                           case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild2 of wild3 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } } }) -}
758bf26cffd580ff2e525117ac8d2cc9
  $fEqUni_$c== :: Type.Uni -> Type.Uni -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Type.Uni) (ds1 :: Type.Uni) ->
                 case ds of wild {
                   Type.Star
                   -> case ds1 of wild1 {
                        Type.Star -> GHC.Types.True Type.Box ipv -> GHC.Types.False }
                   Type.Box a1
                   -> case ds1 of wild1 {
                        Type.Star -> GHC.Types.False
                        Type.Box b1 -> GHC.Integer.Type.eqInteger a1 b1 } }) -}
6758d7e62873e90cf96f48a079ac3e43
  $fEqVar :: GHC.Classes.Eq Type.Var
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:. @ Type.Var Type.$fEqVar_$c== Type.$fEqVar_$c/= -}
6758d7e62873e90cf96f48a079ac3e43
  $fEqVar_$c/= :: Type.Var -> Type.Var -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Text.$fEqText_$c/=
                  `cast`
                (Sym (Type.N:Var[0])
                 ->_R Sym (Type.N:Var[0])
                 ->_R <GHC.Types.Bool>_R) -}
6758d7e62873e90cf96f48a079ac3e43
  $fEqVar_$c== :: Type.Var -> Type.Var -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),1*U(U,U,U)><S(LLS),1*U(U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Data.Text.$fEqText_$c==
                  `cast`
                (Sym (Type.N:Var[0])
                 ->_R Sym (Type.N:Var[0])
                 ->_R <GHC.Types.Bool>_R) -}
6758d7e62873e90cf96f48a079ac3e43
  $fOrdVar :: GHC.Classes.Ord Type.Var
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Type.Var
                  Type.$fEqVar
                  Type.$fOrdVar_$ccompare
                  Type.$fOrdVar_$c<
                  Type.$fOrdVar_$c<=
                  Type.$fOrdVar_$c>
                  Type.$fOrdVar_$c>=
                  Type.$fOrdVar_$cmax
                  Type.$fOrdVar_$cmin -}
6758d7e62873e90cf96f48a079ac3e43
  $fOrdVar_$c< :: Type.Var -> Type.Var -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),1*U(U,U,U)><S(LLS),1*U(U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Data.Text.$fOrdText_$c<
                  `cast`
                (Sym (Type.N:Var[0])
                 ->_R Sym (Type.N:Var[0])
                 ->_R <GHC.Types.Bool>_R) -}
6758d7e62873e90cf96f48a079ac3e43
  $fOrdVar_$c<= :: Type.Var -> Type.Var -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),1*U(U,U,U)><S(LLS),1*U(U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Data.Text.$fOrdText_$c<=
                  `cast`
                (Sym (Type.N:Var[0])
                 ->_R Sym (Type.N:Var[0])
                 ->_R <GHC.Types.Bool>_R) -}
6758d7e62873e90cf96f48a079ac3e43
  $fOrdVar_$c> :: Type.Var -> Type.Var -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),1*U(U,U,U)><S(LLS),1*U(U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Data.Text.$fOrdText_$c>
                  `cast`
                (Sym (Type.N:Var[0])
                 ->_R Sym (Type.N:Var[0])
                 ->_R <GHC.Types.Bool>_R) -}
6758d7e62873e90cf96f48a079ac3e43
  $fOrdVar_$c>= :: Type.Var -> Type.Var -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),1*U(U,U,U)><S(LLS),1*U(U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Data.Text.$fOrdText_$c>=
                  `cast`
                (Sym (Type.N:Var[0])
                 ->_R Sym (Type.N:Var[0])
                 ->_R <GHC.Types.Bool>_R) -}
6758d7e62873e90cf96f48a079ac3e43
  $fOrdVar_$ccompare :: Type.Var -> Type.Var -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),1*U(U,U,U)><S(LLS),1*U(U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Data.Text.$fOrdText_$ccompare
                  `cast`
                (Sym (Type.N:Var[0])
                 ->_R Sym (Type.N:Var[0])
                 ->_R <GHC.Types.Ordering>_R) -}
6758d7e62873e90cf96f48a079ac3e43
  $fOrdVar_$cmax :: Type.Var -> Type.Var -> Type.Var
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),U(U,U,U)><S(LLS),U(U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                Data.Text.$fOrdText_$cmax
                  `cast`
                (Sym (Type.N:Var[0])
                 ->_R Sym (Type.N:Var[0])
                 ->_R Sym (Type.N:Var[0])) -}
6758d7e62873e90cf96f48a079ac3e43
  $fOrdVar_$cmin :: Type.Var -> Type.Var -> Type.Var
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),U(U,U,U)><S(LLS),U(U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                Data.Text.$fOrdText_$cmin
                  `cast`
                (Sym (Type.N:Var[0])
                 ->_R Sym (Type.N:Var[0])
                 ->_R Sym (Type.N:Var[0])) -}
6758d7e62873e90cf96f48a079ac3e43
  $fReadVar :: GHC.Read.Read Type.Var
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Type.Var
                  Type.$fReadVar_$creadsPrec
                  Type.$fReadVar_$creadList
                  Type.$fReadVar_$creadPrec
                  Type.$fReadVar_$creadListPrec -}
6758d7e62873e90cf96f48a079ac3e43
  $fReadVar1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Type.Var] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [Type.Var] -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.list1
                   @ Type.Var
                   Type.$fReadVar2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <Type.Var>_R))
                   eta
                   @ b
                   eta1) -}
6758d7e62873e90cf96f48a079ac3e43
  $fReadVar2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Type.Var
  {- Arity: 1,
     Unfolding: (GHC.Read.parens1
                   @ Type.Var
                   Type.$fReadVar3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Type.Var>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <Type.Var>_R)))) -}
6758d7e62873e90cf96f48a079ac3e43
  $fReadVar3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Type.Var -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (w1 :: Type.Var -> Text.ParserCombinators.ReadP.P b) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Type.$w$creadPrec ww1 @ b w1 }) -}
7bb8301413d932d241b1d007d4196450
  $fReadVar4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "V"#) -}
0e0cc0ea39bf219b744ce1d8cb5d7f65
  $fReadVar5 :: Text.ParserCombinators.ReadP.P [GHC.Types.Char]
  {- Unfolding: (GHC.Read.$fReadChar2
                   Type.$fReadVar_p
                   @ [GHC.Types.Char]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [GHC.Types.Char])) -}
6758d7e62873e90cf96f48a079ac3e43
  $fReadVar6 :: Text.ParserCombinators.ReadP.P [Type.Var]
  {- Unfolding: (GHC.Read.list1
                   @ Type.Var
                   Type.$fReadVar2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <Type.Var>_R))
                   GHC.Read.$fRead()5
                   @ [Type.Var]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [Type.Var])) -}
6758d7e62873e90cf96f48a079ac3e43
  $fReadVar_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Type.Var]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [Type.Var]
                   Type.$fReadVar6) -}
6758d7e62873e90cf96f48a079ac3e43
  $fReadVar_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Type.Var]
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Type.$fReadVar1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <[Type.Var]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Type.Var]>_R))) -}
6758d7e62873e90cf96f48a079ac3e43
  $fReadVar_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Type.Var
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Type.$fReadVar2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Type.Var>_R)) -}
6758d7e62873e90cf96f48a079ac3e43
  $fReadVar_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS Type.Var
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Type.Var
                   ((GHC.Read.parens1
                       @ Type.Var
                       Type.$fReadVar3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Type.Var>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <Type.Var>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Type.Var>_R)
                      @ Type.Var
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Type.Var))) -}
18f3e46853ffcc633988b74deb9f141f
  $fReadVar_p :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
3fa6513992eb8f4d5d199fa60ff97063
  $fShowTerm :: GHC.Show.Show Type.Term
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Type.Term
                  Type.$fShowTerm_$cshowsPrec
                  Type.$fShowTerm_$cshow
                  Type.$fShowTerm_$cshowList -}
3fa6513992eb8f4d5d199fa60ff97063
  $fShowTerm1 :: Type.Term -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Type.Term) (w1 :: GHC.Base.String) ->
                 Type.$w$cshowsPrec 0# w w1) -}
3fa6513992eb8f4d5d199fa60ff97063
  $fShowTerm_$cshow :: Type.Term -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Type.Term) ->
                 Type.$fShowTerm_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
3fa6513992eb8f4d5d199fa60ff97063
  $fShowTerm_$cshowList :: [Type.Term] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Type.Term Type.$fShowTerm1) -}
3fa6513992eb8f4d5d199fa60ff97063
  $fShowTerm_$cshowsPrec ::
    GHC.Types.Int -> Type.Term -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Type.Term)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Type.$w$cshowsPrec ww1 w1 w2 }) -}
758bf26cffd580ff2e525117ac8d2cc9
  $fShowUni :: GHC.Show.Show Type.Uni
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Type.Uni
                  Type.$fShowUni_$cshowsPrec
                  Type.$fShowUni_$cshow
                  Type.$fShowUni_$cshowList -}
758bf26cffd580ff2e525117ac8d2cc9
  $fShowUni1 :: Type.Uni -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Type.$fShowUni_$cshowsPrec Type.$fShowUni2) -}
15ea28d5700c66b6acfcf5122826f894
  $fShowUni2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
71f738e22cf5190fb23bbb4c02c499ae
  $fShowUni3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Box "#) -}
987dda186996ddef2e55ae17ac22e6f8
  $fShowUni4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Star"#) -}
758bf26cffd580ff2e525117ac8d2cc9
  $fShowUni_$cshow :: Type.Uni -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Type.Uni) ->
                 case x of wild {
                   Type.Star -> Type.$fShowUni4
                   Type.Box b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Type.$fShowUni3
                        (case GHC.Show.$w$cshowsPrec1
                                11#
                                b1
                                (GHC.Types.[] @ GHC.Types.Char) of ww2 { (#,#) ww3 ww4 ->
                         GHC.Types.: @ GHC.Types.Char ww3 ww4 }) }) -}
758bf26cffd580ff2e525117ac8d2cc9
  $fShowUni_$cshowList :: [Type.Uni] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Type.Uni Type.$fShowUni1) -}
758bf26cffd580ff2e525117ac8d2cc9
  $fShowUni_$cshowsPrec ::
    GHC.Types.Int -> Type.Uni -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: Type.Uni)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Type.Star -> GHC.Base.++ @ GHC.Types.Char Type.$fShowUni4 eta
                   Type.Box b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Type.$fShowUni3
                             (case GHC.Show.$w$cshowsPrec1 11# b1 eta of ww2 { (#,#) ww3 ww4 ->
                              GHC.Types.: @ GHC.Types.Char ww3 ww4 })
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Type.$fShowUni3
                                (case GHC.Show.$w$cshowsPrec1
                                        11#
                                        b1
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.shows4
                                           eta) of ww2 { (#,#) ww3 ww4 ->
                                 GHC.Types.: @ GHC.Types.Char ww3 ww4 })) } } }) -}
6758d7e62873e90cf96f48a079ac3e43
  $fShowVar :: GHC.Show.Show Type.Var
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Type.Var
                  Type.$fShowVar_$cshowsPrec
                  Type.$fShowVar_$cshow
                  Type.$fShowVar_$cshowList -}
6758d7e62873e90cf96f48a079ac3e43
  $fShowVar1 :: Type.Var -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Type.Var) (w1 :: GHC.Base.String) ->
                 Type.$w$cshowsPrec1 0# w w1) -}
fafd5a5e3ab43da7e635a475f4ce6cfe
  $fShowVar2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "V "#) -}
6758d7e62873e90cf96f48a079ac3e43
  $fShowVar_$cshow :: Type.Var -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U,U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Type.Var) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n Type.$fShowVar2)
                   (case Data.Text.Show.$w$cshowsPrec
                           x `cast` (Type.N:Var[0])
                           (GHC.Types.[] @ GHC.Types.Char) of ww { (#,#) ww1 ww2 ->
                    GHC.Types.: @ GHC.Types.Char ww1 ww2 })) -}
6758d7e62873e90cf96f48a079ac3e43
  $fShowVar_$cshowList :: [Type.Var] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Type.Var Type.$fShowVar1) -}
6758d7e62873e90cf96f48a079ac3e43
  $fShowVar_$cshowsPrec ::
    GHC.Types.Int -> Type.Var -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U(U,U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Type.Var) (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Type.$w$cshowsPrec1 ww1 w1 w2 }) -}
bf86e1d8eb241427b50e908033d21c6d
  $tc'App :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6934665516193424308##
                   2247174792444504265##
                   Type.$trModule
                   Type.$tc'App1) -}
0760454545bb753ce70d5ec8a6e5b188
  $tc'App1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'App"#) -}
62508ec41c855e4ecb2deadb513bd86f
  $tc'Box :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15785677517463275586##
                   2251387842305953707##
                   Type.$trModule
                   Type.$tc'Box1) -}
dc045be199a811176778f9cef53fd873
  $tc'Box1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Box"#) -}
3dcf4fb4ce76c0c6939d523306d6503b
  $tc'Fa :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3563488067241111189##
                   11845276409721701870##
                   Type.$trModule
                   Type.$tc'Fa1) -}
052e67e1adf311a6cf0780834fbd3006
  $tc'Fa1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Fa"#) -}
37535e09595448f53b454fb05be0dc9b
  $tc'Lam :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18094204179625384961##
                   14067989805310518801##
                   Type.$trModule
                   Type.$tc'Lam1) -}
f63ac2ad63eeb19cb8306312a773dcea
  $tc'Lam1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Lam"#) -}
d73e6e763019d716f11ef4c62aced986
  $tc'Star :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18012379379548636609##
                   7868020476678606587##
                   Type.$trModule
                   Type.$tc'Star1) -}
455551c3f5729179d4a34a5a92dbdc57
  $tc'Star1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Star"#) -}
e73e6efdd2fede98766840e60e0a2761
  $tc'Uni :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3383303406048287969##
                   9510321164973802712##
                   Type.$trModule
                   Type.$tc'Uni1) -}
6097d739359869021f5f201a3d3db432
  $tc'Uni1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Uni"#) -}
709970080d27c971cb6af12ec627a43b
  $tc'V :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1317850859634288982##
                   4032137503456712510##
                   Type.$trModule
                   Type.$tc'V1) -}
f2ad7a687e7b3d791ea794131fae31b3
  $tc'V1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'V"#) -}
a6d3972f60b6295930c9356b6c1762cb
  $tc'Var :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6276883096396015911##
                   4311206408743044141##
                   Type.$trModule
                   Type.$tc'Var1) -}
4ffa87e583b51c0a67f7ec94e64c70b1
  $tc'Var1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Var"#) -}
2ddcc0fd198a9c03dd6816f83acc5016
  $tcTerm :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3232622341780650974##
                   8181788575726471076##
                   Type.$trModule
                   Type.$tcTerm1) -}
23eef383faab0a40e63478d0ad1e72c2
  $tcTerm1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Term"#) -}
7f22bf776659a08896cfb78e22033834
  $tcUni :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4285871807133348219##
                   2774508018437033972##
                   Type.$trModule
                   Type.$tcUni1) -}
14cd8b275fb92dee3ab2311c6ce2d3a4
  $tcUni1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Uni"#) -}
06ae6080a137e1c01b4e2df75ea852c2
  $tcVar :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2207535262447250815##
                   11584032510068943601##
                   Type.$trModule
                   Type.$tcVar1) -}
f3871053e1dbcbba01e06b684bb135dd
  $tcVar1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Var"#) -}
54740bc029cda2934d5c1f90f8ffaa59
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Type.$trModule2 Type.$trModule1) -}
53a639fdf0255dee8a449c91ce9ede32
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Type"#) -}
3ef4991895d84676c6295d5f1277a7ec
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "proj-0.1.0.0-GViSLdnWNEqHe1z7eCQaTl"#) -}
6758d7e62873e90cf96f48a079ac3e43
  $w$creadPrec ::
    GHC.Prim.Int#
    -> forall b.
       (Type.Var -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,U><L,C(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   @ b
                   (w :: Type.Var -> Text.ParserCombinators.ReadP.P b) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10#) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl81 :: Text.ParserCombinators.ReadP.P b
                        = letrec {
                            go :: [(Data.Text.Internal.Text, GHC.Base.String)]
                                  -> [(b, GHC.Base.String)]
                              {- Arity: 1, Strictness: <S,1*U> -}
                            = \ (ds :: [(Data.Text.Internal.Text, GHC.Base.String)]) ->
                              case ds of wild {
                                [] -> GHC.Types.[] @ (b, GHC.Base.String)
                                : y ys
                                -> case y of wild1 { (,) a1 s' ->
                                   GHC.Base.++
                                     @ (b, GHC.Base.String)
                                     (Text.ParserCombinators.ReadP.run
                                        @ b
                                        (w a1 `cast` (Sym (Type.N:Var[0])))
                                        s')
                                     (go ys) } }
                          } in
                          let {
                            ww1 :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b
                              {- Arity: 1, Strictness: <L,U> -}
                            = \ (s :: GHC.Base.String) ->
                              case go
                                     (Data.Text.$fReadText_go
                                        (Text.ParserCombinators.ReadP.run
                                           @ [GHC.Types.Char]
                                           Type.$fReadVar5
                                           s)) of wild {
                                [] -> Text.ParserCombinators.ReadP.Fail @ b
                                : ipv ipv1 -> Text.ParserCombinators.ReadP.Final @ b wild }
                          } in
                          let {
                            lvl82 :: Text.ParserCombinators.ReadP.P b
                            = Text.ParserCombinators.ReadP.Look @ b ww1
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ (a1 :: Text.Read.Lex.Lexeme) ->
                             case a1 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a2
                               -> case GHC.Base.eqString a2 Type.$fReadVar4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl82 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl81) -}
                        = \ (w4 :: ()) -> lvl81
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ (a :: GHC.Base.String) ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                           `cast`
                         (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
3fa6513992eb8f4d5d199fa60ff97063
  $w$cshowsPrec ::
    GHC.Prim.Int# -> Type.Term -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0] -}
6758d7e62873e90cf96f48a079ac3e43
  $w$cshowsPrec1 ::
    GHC.Prim.Int# -> Type.Var -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U(U,U,U)><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Type.Var)
                   (w1 :: GHC.Base.String) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Type.$fShowVar2
                        (case Data.Text.Show.$w$cshowsPrec
                                w `cast` (Type.N:Var[0])
                                w1 of ww1 { (#,#) ww2 ww3 ->
                         GHC.Types.: @ GHC.Types.Char ww2 ww3 })
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Type.$fShowVar2
                           (case Data.Text.Show.$w$cshowsPrec
                                   w `cast` (Type.N:Var[0])
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.shows4
                                      w1) of ww1 { (#,#) ww2 ww3 ->
                            GHC.Types.: @ GHC.Types.Char ww2 ww3 })) }) -}
0a366696f410ce6161240d24238669b9
  type Name = Data.Text.Internal.Text
3fa6513992eb8f4d5d199fa60ff97063
  data Term
    = Var {var :: Type.Var}
    | App {alg :: Type.Term, dat :: Type.Term}
    | Lam {var :: Type.Var, tpe :: Type.Term, body :: Type.Term}
    | Fa {var :: Type.Var, tpe :: Type.Term, body :: Type.Term}
    | Uni {uni :: Type.Uni}
758bf26cffd580ff2e525117ac8d2cc9
  data Uni = Star | Box GHC.Integer.Type.Integer
6758d7e62873e90cf96f48a079ac3e43
  newtype Var = V Type.Name
345062ea136578ac797abf7d64cd2e93
  alg :: Type.Term -> Type.Term
  RecSel Left Type.Term
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Type.Term) ->
                 case ds of wild {
                   DEFAULT -> Type.alg1 Type.App ds1 ds2 -> ds1 }) -}
28aa9db220c431ebe5658fa13728e691
  alg1 :: Type.Term
  {- Strictness: x -}
f804aff3599dbab5ad1c7d51b3bbe872
  axiom :: Type.Uni -> Type.Uni
  {- Arity: 1, Strictness: <S,1*U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Type.Uni) ->
                 case ds of wild {
                   Type.Star -> Type.axiom2
                   Type.Box i
                   -> Type.Box (GHC.Integer.Type.plusInteger i Type.axiom1) }) -}
7c7558decbe1ed5f8d35c9c27c109854
  axiom1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
9da1780c014538a36e21c2951050a61a
  axiom2 :: Type.Uni
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Type.Box Type.axiom1) -}
9ce4fa7e1dfe33171c59dd3e2edddea3
  body :: Type.Term -> Type.Term
  RecSel Left Type.Term
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Type.Term) ->
                 case ds of wild {
                   DEFAULT -> Type.body1
                   Type.Lam ds1 ds2 ds3 -> ds3
                   Type.Fa ds1 ds2 ds3 -> ds3 }) -}
9c958809186675f4f991a17260d679df
  body1 :: Type.Term
  {- Strictness: x -}
e99489163a520c397b5db9cf3ea388f1
  dat :: Type.Term -> Type.Term
  RecSel Left Type.Term
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Type.Term) ->
                 case ds of wild {
                   DEFAULT -> Type.dat1 Type.App ds1 ds2 -> ds2 }) -}
8de43a70158d260c653bf7069ee753df
  dat1 :: Type.Term
  {- Strictness: x -}
c000626881bb20761ad229d8d67877a0
  noname :: Type.Var
  {- Unfolding: InlineRule (0, True, True)
                Type.noname1 `cast` (Sym (Type.N:Var[0])) -}
c14108ff78807db22f32ab205701e7e4
  noname1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "_"#) -}
f5e8ce4c8f1b4f43163b488702d9ca4d
  tpe :: Type.Term -> Type.Term
  RecSel Left Type.Term
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Type.Term) ->
                 case ds of wild {
                   DEFAULT -> Type.tpe1
                   Type.Lam ds1 ds2 ds3 -> ds2
                   Type.Fa ds1 ds2 ds3 -> ds2 }) -}
522facbc87773043af5be36b9230edd8
  tpe1 :: Type.Term
  {- Strictness: x -}
caa31898e4196bbe85b0fd9bb47ce779
  uni :: Type.Term -> Type.Uni
  RecSel Left Type.Term
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Type.Term) ->
                 case ds of wild { DEFAULT -> Type.uni1 Type.Uni ds1 -> ds1 }) -}
518806ebf4cb97d2a5c7dd00149588e9
  uni1 :: Type.Uni
  {- Strictness: x -}
ffcbf9276628ea3a2de8c9c7a5fe2a6a
  var :: Type.Term -> Type.Var
  RecSel Left Type.Term
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Type.Term) ->
                 case ds of wild {
                   DEFAULT -> Type.var1
                   Type.Var ds1 -> ds1
                   Type.Lam ds1 ds2 ds3 -> ds1
                   Type.Fa ds1 ds2 ds3 -> ds1 }) -}
2e399226b9e291d0ee5696b07a239ce0
  var1 :: Type.Var
  {- Strictness: x -}
instance [safe] GHC.Classes.Eq [Type.Term] = Type.$fEqTerm
instance [safe] GHC.Classes.Eq [Type.Uni] = Type.$fEqUni
instance [safe] GHC.Classes.Eq [Type.Var] = Type.$fEqVar
instance [safe] GHC.Classes.Ord [Type.Var] = Type.$fOrdVar
instance [safe] GHC.Read.Read [Type.Var] = Type.$fReadVar
instance [safe] GHC.Show.Show [Type.Term] = Type.$fShowTerm
instance [safe] GHC.Show.Show [Type.Uni] = Type.$fShowUni
instance [safe] GHC.Show.Show [Type.Var] = Type.$fShowVar
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

